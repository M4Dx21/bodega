# -*- coding: utf-8 -*-python datos.py

"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ktGYyhQHVqiYf34l5sayuqCcx4JMzvU9
"""

import pandas as pd
from sklearn.linear_model import LinearRegression



# Cargar CSVs exportados desde MySQL
cirugias = pd.read_csv('cirugias.csv')
componentes = pd.read_csv('componentes.csv')

# Expandir insumos tipo "GUANTE (x2), BISTURI (x1)" 
def expandir_insumos(row):
    resultado = []
    insumos = str(row['insumos']).split(',')
    for ins in insumos:
        ins = ins.strip()
        if '(x' in ins:
            nombre, cantidad = ins.split('(x')
            cantidad = int(cantidad.replace(')', '').strip())
        else:
            nombre = ins
            cantidad = 1
        resultado.append({
            'insumo': nombre.strip(),
            'cantidad': cantidad,
            'fecha_sol': row['fecha_sol']
        })
    return resultado

# Aplicar expansión
datos_expand = []
for _, fila in cirugias.iterrows():
    datos_expand.extend(expandir_insumos(fila))

df_insumos = pd.DataFrame(datos_expand)

# Convertir fecha
df_insumos['fecha_sol'] = pd.to_datetime(df_insumos['fecha_sol'], errors='coerce')
df_insumos['mes'] = df_insumos['fecha_sol'].dt.to_period('M')

# Unir con especialidad desde componentes
componentes = componentes[['insumo', 'especialidad', 'stock']]
df_merged = df_insumos.merge(componentes, on='insumo', how='left')

# ==============================
# 2. Agrupar y predecir
# ==============================

# Agrupar por mes e insumo
df_grouped = df_merged.groupby(['mes', 'insumo'])['cantidad'].sum().reset_index()

# Elegir un insumo de ejemplo
insumo_elegido = df_grouped['insumo'].unique()[0]
datos_insumo = df_grouped[df_grouped['insumo'] == insumo_elegido].copy()

# Ordenar por mes
datos_insumo = datos_insumo.sort_values('mes')
datos_insumo['mes'] = datos_insumo['mes'].astype('period[M]')
datos_insumo['mes_num'] = range(len(datos_insumo))

# ==============================
# 3. Regresión lineal
# ==============================

#X = datos_insumo[['mes_num']]
#y = datos_insumo['cantidad']
#modelo = LinearRegression().fit(X, y)

# Predecir próximos 3 meses
#ultimo_mes = datos_insumo['mes'].max()
#futuro = pd.DataFrame({'mes_num': range(len(X), len(X) + 3)})
#futuro['prediccion'] = modelo.predict(futuro[['mes_num']])
#futuro['mes'] = pd.period_range(start=ultimo_mes + 1, periods=3, freq='M').astype(str)

# ==============================
# 4. Graficar
# ==============================

#plt.figure(figsize=(10, 5))
#plt.plot(datos_insumo['mes_num'], datos_insumo['cantidad'], marker='o', label='Histórico')
#plt.plot(futuro['mes_num'], futuro['prediccion'], marker='x', linestyle='--', color='red', label='Predicción')

#plt.title(f' Predicción de consumo: {insumo_elegido}')
#plt.xlabel('Mes (numérico)')
#plt.ylabel('Cantidad usada')
#plt.grid()
#plt.legend()
#plt.tight_layout()
#plt.show()

conteo_insumos = df_grouped['insumo'].value_counts()
print(conteo_insumos)

# DASHBOARD 1: Predicción de insumos necesarios a fin de mes
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import pandas as pd

# Filtrar insumos con al menos 3 meses de historial
conteo_insumos = df_grouped['insumo'].value_counts()
insumos_validos = conteo_insumos[conteo_insumos >= 3].index

resultados = []
for insumo in insumos_validos:
    datos = df_grouped[df_grouped['insumo'] == insumo].copy()
    datos = datos.sort_values('mes')
    datos['mes_num'] = range(len(datos))

    X = datos[['mes_num']]
    y = datos['cantidad']
    modelo = LinearRegression().fit(X, y)

    futuro = pd.DataFrame({'mes_num': range(len(X), len(X) + 1)})
    futuro['prediccion'] = modelo.predict(futuro[['mes_num']])
    futuro['insumo'] = insumo

    resultados.append(futuro)

df_pred = pd.concat(resultados)
df_pred['prediccion'] = df_pred['prediccion'].round().astype(int)

# Mostrar predicciones
plt.figure(figsize=(12, 6))
df_pred.sort_values('prediccion', ascending=False, inplace=True)
plt.barh(df_pred['insumo'], df_pred['prediccion'], color='steelblue')
plt.xlabel('Cantidad estimada a comprar')
plt.title(' Predicción de insumos necesarios a fin de mes')
plt.gca().invert_yaxis()
plt.tight_layout()
plt.savefig("asset/dashboard1_prediccion_insumos.png")  # o el número que corresponda
plt.close()


# DASHBOARD 2: 10 productos más consumidos mensualmente (horizontal)
mensual = df_grouped.groupby('insumo')['cantidad'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(10, 6))
mensual.plot(kind='barh', color='skyblue')
plt.title(' 10 productos más consumidos')
plt.xlabel('Cantidad total')
plt.ylabel('Insumo')
plt.gca().invert_yaxis()  # Para que el más consumido aparezca arriba
plt.grid(axis='x')
plt.tight_layout()
plt.savefig("asset/dashboard2_top10_insumos.png")  # o el número que corresponda
plt.close()


# DASHBOARD 3: Especialidades que más consumen y su insumo más solicitado
especialidad_group = df_merged.groupby(['especialidad', 'insumo'])['cantidad'].sum().reset_index()
especialidad_top = especialidad_group.sort_values(['especialidad', 'cantidad'], ascending=[True, False])

# Obtener el insumo más consumido por especialidad
top_insumos = especialidad_top.groupby('especialidad').first().reset_index()
plt.figure(figsize=(10,6))
plt.barh(top_insumos['especialidad'], top_insumos['cantidad'], color='mediumseagreen')
plt.xlabel('Cantidad')
plt.title(' Insumo más consumido por especialidad')
plt.tight_layout()
plt.savefig("asset/dashboard3_especialidades.png")  # o el número que corresponda
plt.close()


import seaborn as sns
import matplotlib.pyplot as plt

# Asegúrate de tener df_grouped generado antes:
# df_grouped = df_merged.groupby(['mes', 'insumo'])['cantidad'].sum().reset_index()

# Crear tabla dinámica para el heatmap
heatmap_data = df_grouped.pivot_table(index='insumo', columns='mes', values='cantidad', aggfunc='sum', fill_value=0)

# Visualizar el mapa de calor
plt.figure(figsize=(14, 8))
sns.heatmap(heatmap_data, annot=True, fmt='g', cmap='YlGnBu')
plt.title(' Mapa de calor: consumo mensual por insumo')
plt.xlabel('Mes')
plt.ylabel('Insumo')
plt.tight_layout()
plt.savefig("asset/dashboard4_heatmap.png")  # o el número que corresponda
plt.close()
